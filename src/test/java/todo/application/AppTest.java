/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package todo.application;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import todo.application.business.TodoApplication;
import todo.application.data.access.TodoDataAccess;
import todo.application.data.entity.TodoTask;
import todo.application.exceptions.TodoApplicationException;

class AppTest
{
	private TodoApplication todoApp;

	@BeforeEach
	void setUp()
	{
		todoApp = new TodoApplication( new TodoDataAccess()
		{

			@Override
			public void update( TodoTask todoTask )
			{
				// TODO Auto-generated method stub

			}

			@Override
			public void save( TodoTask todoTask )
			{
				// TODO Auto-generated method stub

			}

			@Override
			public List<TodoTask> getAll()
			{
				// TODO Auto-generated method stub
				return null;
			}

			@Override
			public TodoTask get( long taskId )
			{
				// TODO Auto-generated method stub
				return null;
			}

			@Override
			public void delete( TodoTask todoTask )
			{
				// TODO Auto-generated method stub

			}

			@Override
			public TodoTask create()
			{
				TodoTask todoTask = new TodoTask();
				todoTask.setTaskId( 1L );
				return todoTask;
			}
		} );
	}

	@Test
	void testCreateTodoTaskWithRequiredDetails() throws TodoApplicationException
	{
		String taskName = "Read a book";
		String targetDateStr = "15/03/2020";
		TodoTask todoTask = todoApp.createTodoTask( taskName, targetDateStr );
		assertNotNull( todoTask );
		assertTrue( todoTask.getTaskId() > 0 );
		assertEquals( taskName, todoTask.getTaskName() );
		assertEquals( new GregorianCalendar( 2020, 02, 15 ).getTime(), todoTask.getTargetDate() );
	}

	@Test
	void testTargetDateShouldBeInRequiredFormat()
	{
		String taskName = "Read a book";
		String targetDateStr = "15/2020";
		TodoApplicationException exception = assertThrows( TodoApplicationException.class, () -> todoApp.createTodoTask( taskName, targetDateStr ) );
		assertEquals( "Target date should be in dd/MM/yyyy format", exception.getMessage() );
	}

	@Test
	void testTaskNameCannotBeEmpty()
	{
		String taskName = "";
		String targetDateStr = "15/03/2020";
		TodoApplicationException exception = assertThrows( TodoApplicationException.class, () -> todoApp.createTodoTask( taskName, targetDateStr ) );
		assertEquals( "Task name cannot be empty", exception.getMessage() );
	}

	@Test
	void testTodoTaskCannotBeCreatedForPastDate()
	{
		String taskName = "Read a book";
		String targetDateStr = "15/03/2019";
		TodoApplicationException exception = assertThrows( TodoApplicationException.class, () -> todoApp.createTodoTask( taskName, targetDateStr ) );
		assertEquals( "Task cannot be created for past date", exception.getMessage() );
	}

	@Test
	void testReturnTodoTaskForATaskId() throws TodoApplicationException
	{
		TodoTask todoTask = mock( TodoTask.class );
		TodoDataAccess todoDataAccess = mock( TodoDataAccess.class );
		when( todoDataAccess.get( 1L ) ).thenReturn( todoTask );
		todoApp = new TodoApplication( todoDataAccess );
		todoTask = todoApp.getTodoTask( 1L );
		assertNotNull( todoTask );
		verify( todoDataAccess ).get( 1L );
	}

	@Test
	void testThrowErrorIfTodoTaskIsNotAvailableForTaskId()
	{
		TodoDataAccess todoDataAccess = mock( TodoDataAccess.class );
		when( todoDataAccess.get( 1L ) ).thenReturn( null );
		todoApp = new TodoApplication( todoDataAccess );
		TodoApplicationException exception = assertThrows( TodoApplicationException.class, () -> todoApp.getTodoTask( 1L ) );
		assertEquals( "Todo task with id 1 not found", exception.getMessage() );
		verify( todoDataAccess ).get( 1L );
	}

	@Test
	void testUpdateTodoTaskWithCompletionDate() throws TodoApplicationException
	{
		long taskId = 1L;
		String completionDateStr = "16/03/2020";
		Date completionDate = new GregorianCalendar( 2020, 2, 16 ).getTime();

		TodoTask todoTask = mock( TodoTask.class );
		when( todoTask.getTargetDate() ).thenReturn( new GregorianCalendar( 2020, 2, 16 ).getTime() );
		TodoDataAccess todoDataAccess = mock( TodoDataAccess.class );
		when( todoDataAccess.get( taskId ) ).thenReturn( todoTask );
		todoApp = new TodoApplication( todoDataAccess );
		todoApp.updateTodoTask( taskId, completionDateStr );
		verify( todoDataAccess ).get( taskId );
		verify( todoTask ).setCompletionDate( completionDate );
		verify( todoDataAccess ).update( todoTask );
	}

	@Test
	void testCompletionDateShouldBeInRequiredFormat()
	{
		long taskId = 1L;
		String completionDateStr = "23/2020";
		todoApp = new TodoApplication( null );
		TodoApplicationException exception = assertThrows( TodoApplicationException.class, () -> todoApp.updateTodoTask( taskId, completionDateStr ) );
		assertEquals( "Completion date should be in dd/MM/yyyy format", exception.getMessage() );
	}

	@Test
	void testCompletionDateCannotBeLessThanTargetDate() throws TodoApplicationException
	{
		String completionDateStr = "13/03/2020";
		TodoTask todoTask = mock( TodoTask.class );
		when( todoTask.getTargetDate() ).thenReturn( new GregorianCalendar( 2020, 02, 14 ).getTime() );
		TodoDataAccess todoDataAccess = mock( TodoDataAccess.class );
		when( todoDataAccess.get( 1L ) ).thenReturn( todoTask );
		todoApp = new TodoApplication( todoDataAccess );
		TodoApplicationException exception = assertThrows( TodoApplicationException.class, () -> todoApp.updateTodoTask( 1L, completionDateStr ) );
		assertEquals( "Completion date cannot be less than target date", exception.getMessage() );
		verify( todoTask ).getTargetDate();
		verify( todoDataAccess ).get( 1L );
	}
}
